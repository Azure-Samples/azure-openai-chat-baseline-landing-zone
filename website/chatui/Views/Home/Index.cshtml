<html>

<head>
  <style type="text/css">
    :root {
        --body-bg: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        --msger-bg: #fff;
        --border: 2px solid #ddd;
        --left-msg-bg: #ececec;
        --right-msg-bg: #579ffb;
    }

    html {
        box-sizing: border-box;
    }

    *,
    *:before,
    *:after {
        margin: 0;
        padding: 0;
        box-sizing: inherit;
    }

    body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-image: var(--body-bg);
        font-family: Helvetica, sans-serif;
    }

    .msger {
        display: flex;
        flex-flow: column wrap;
        justify-content: space-between;
        width: 100%;
        max-width: 867px;
        margin: 25px 10px;
        height: calc(100% - 50px);
        border: var(--border);
        border-radius: 5px;
        background: var(--msger-bg);
        box-shadow: 0 15px 15px -5px rgba(0, 0, 0, 0.2);
    }

    .msger-header {
        display: flex;
        justify-content: space-between;
        padding: 10px;
        border-bottom: var(--border);
        background: #eee;
        color: #666;
    }

    .msger-chat {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .msger-chat::-webkit-scrollbar {
        width: 6px;
    }

    .msger-chat::-webkit-scrollbar-track {
        background: #ddd;
    }

    .msger-chat::-webkit-scrollbar-thumb {
        background: #bdbdbd;
    }

    .msg {
        display: flex;
        align-items: flex-end;
        margin-bottom: 10px;
    }

    .msg:last-of-type {
        margin: 0;
    }

    .msg-img {
        width: 50px;
        height: 50px;
        margin-right: 10px;
        background: #ddd;
        background-repeat: no-repeat;
        background-position: center;
        background-size: cover;
        border-radius: 50%;
    }

    .msg-bubble {
        max-width: 450px;
        padding: 15px;
        border-radius: 15px;
        background: var(--left-msg-bg);
    }

    .msg-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .msg-info-name {
        margin-right: 10px;
        font-weight: bold;
    }

    .msg-info-time {
        font-size: 0.85em;
    }

    .left-msg .msg-bubble {
        border-bottom-left-radius: 0;
    }

    .right-msg {
        flex-direction: row-reverse;
    }

    .right-msg .msg-bubble {
        background: var(--right-msg-bg);
        color: #fff;
        border-bottom-right-radius: 0;
    }

    .right-msg .msg-img {
        margin: 0 0 0 10px;
    }

    .msger-inputarea {
        display: flex;
        padding: 10px;
        border-top: var(--border);
        background: #eee;
    }

    .msger-inputarea * {
        padding: 10px;
        border: none;
        border-radius: 3px;
        font-size: 1em;
    }

    .msger-input {
        flex: 1;
        background: #ddd;
    }

    .msger-send-btn {
        margin-left: 10px;
        background: rgb(0, 196, 65);
        color: #fff;
        font-weight: bold;
        cursor: pointer;
        transition: background 0.23s;
    }

    .msger-send-btn:hover {
        background: rgb(0, 180, 50);
    }

    .msger-chat {
        background-color: #ffffff;
    }
  </style>
  
  <script type="text/javascript">
    const BOT_NAME = "Chatbot";
    const PERSON_NAME = "";

    document.addEventListener("DOMContentLoaded", () => {
        const chatForm = document.querySelector(".msger-inputarea");
        const chatContainer = document.querySelector(".msger-chat");
        const messageInput = chatForm?.elements?.message;

        addChatMessage(BOT_NAME, "left", "How can I help you today?");

        chatForm.addEventListener("submit", async (event) => {
            event.preventDefault();
            const prompt = messageInput?.value?.trim();

            if (!prompt) return;

            messageInput.value = "";

            addChatMessage(PERSON_NAME, "right", prompt);

            try {
                const { data } = await sendPrompt(prompt);
                addChatMessage(BOT_NAME, "left", data);
            } catch (error) {
                addChatMessage(BOT_NAME, "left", `Sorry, something went wrong.`);
                console.error(error);
            }
        });

        async function sendPrompt(prompt) {
            const response = await fetch("/chat/completions", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(prompt)
            });

            if (!response.ok) {
                const errorMessage = await response.text().catch(() => response.statusText);
                throw new Error(`Error sending prompt: ${errorMessage}`);
            }

            return response.json();
        }

        function addChatMessage(name, side, text) {
            const timestamp = formatTime(new Date());

            const msgHTML = `
                <div class="msg ${side}-msg">
                    <div class="msg-bubble">
                    <div class="msg-info">
                        <div class="msg-info-name">${name}</div>
                        <div class="msg-info-time">${timestamp}</div>
                    </div>
                    <div class="msg-text">${escapeHTML(text)}</div>
                    </div>
                </div>
            `;

            chatContainer?.insertAdjacentHTML("beforeend", msgHTML);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        function formatTime(date) {
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        function escapeHTML(str) {
            const div = document.createElement("div");
            div.textContent = str;
            return div.innerHTML;
        }
    });
  </script>
</head>

<body>
  <section class="msger" aria-label="Chat interface">
    <header class="msger-header">
      <h1 class="msger-header-title" aria-label="Chat title">
        <i class="fas fa-comment-alt" aria-hidden="true"></i>
        <span>Chat with your orchestrator</span>
      </h1>
    </header>

    <main class="msger-chat" aria-live="polite" role="log">
      <!-- Chat messages dynamically appear here -->
    </main>

    <form class="msger-inputarea" aria-label="Send a message">
      <input
        id="messageInput"
        name="message"
        type="text"
        class="msger-input"
        placeholder="Ask me about a current event..."
        required
        autocomplete="off"
        aria-label="Type your message"
      />
      <button id="sendButton" class="msger-send-btn" type="submit">Send</button>
    </form>
  </section>
</body>

</html>